---
layout: post
title:  "maven学习（一）-maven初步"
date:   2015-11-16 23:10:45
categories: java 
author : 自来也
---

###简介
maven,一个项目管理和构建工具，java的，基于project object model(POM)，也就是pom对象



##使用

###安装 

maven是基于java的，所以要安装maven前提条件是要有java运行环境，然后去[maven](http://maven.apache.org)下载最新的maven文件。

解压后,如果是在windows下面，需要像配置java环境变量哪样配置maven环境变量，需要把maven目录下的bin目录配置到path环境变量中，配置好后，重新打开cmd命令行，输入命令

	mvn -version

如果配置正确就会出现mvn相关信息

到目前，maven部分完成，接下来要做一点配置，保证maven能够在我们的网络环境运行得更好，因为maven的中央仓库默认是官方的中央仓库，服务器在外国，可能有点慢，有时还可能连接不上去，在初次运行maven时需要下载maven相关的很多插件，由于网络原因，导致maven初始化失败，为了避免这种情况，需要给maven配置一个中央仓库镜像地址，这里选择oschina的镜像仓库(oschina镜像)[http://maven.oschina.net/home.html]。

至此maven安装算是完成

###maven的基础知识

需要知道的基本

- maven本身的配置文件是位于${maven_home}/conf中的settings 和 ${user_home}/settings 或者是项目文件中的settings
- 工程的构建配置文件位于工程的根目录下的POM.xml文件主要分为如下部分
	- 工程基本信息
	- 工程依赖
	- 构建环境配置
	- 工程配置

具体配置信息参考官网的文档
	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	  <modelVersion>4.0.0</modelVersion>

	  <groupId>com.ykjver</groupId>
	  <artifactId>webtest</artifactId>
	  <version>1.0-SNAPSHOT</version>
	  <packaging>jar</packaging>

	  <name>webtest</name>
	  <url>http://maven.apache.org</url>

	  <properties>
	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	  </properties>

	  <dependencies>
	    <dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <version>3.8.1</version>
	      <scope>test</scope>
	    </dependency>
	  </dependencies>
	  
	  	<build>
	  		<plugins>
	  			<plugin>
	  				<groupId>org.apache.maven.plugins</groupId>
	  				<artifactId>maven-compiler-plugin</artifactId>
	  				<version>2.3.2</version>
	  				<configuration>
	  					<source>1.8</source>
	  					<target>1.8</target>
	  				</configuration>
	  			</plugin>
	  		</plugins>
	  	</build>
	  
	</project>

上面是很简单的Pom文件，做了一些基本想配置，详情可见[pom配置](maven.apache.com/pom.html)
 
 - modelVersion 描述pom文件的版本
 - groupId、artifactId、version、packaging一起组成工程坐标
 - name、url等组成工程的描述信息
 - properties 表述键值对属性配置，在pom文件其他地方可以通过`${xxx}`来访问<xxx></xxx>这个节点的值
 - dependencies 用来描述工程的依赖文件，其中的每个dependency就是每一个依赖的声明，也是通过groupId、artifactId
 - version来定位依赖声明的，同时其中的scope标签用来定义依赖的作用范围，有compile、test、provide等值


 maven插件、maven目标和maven周期阶段理解

 maven本身是不提供任何怎么做的东西(how)，在pom中，只提供了有哪些东西，至于具体要怎么做，需要联系到maven插件。

 maven生命周期和阶段，一个项目一般的都会是一个这样的阶段--检查依赖->装备编译资源->编译源码->测试->打包->发布。这样子的一个过程相当于maven所描述的生命周期，而在不同的神明周期中又分了很多不多的阶段，每种可能有多少的差异，但是周期这个理念是不变的。

 同时插件和目标，上面有说到，maven是不描述只能干的，也就是说有生命周期也没用，maven到目前为止还没有提供诸如验证依赖是否正确，准备编译资源，依赖包，编译源码等功能，这些功能就是插件来提供的，目标简单的来说就是插件的一个命令。比如当我执行`mvn help:effective-pom`就相当于执行help插件的effective-pom命令


那插件和周期阶段有什么关系呢？maven把不同的插件绑定到不同的周期上，这样，当我执行`mvn package`(打包)这个阶段时，就会把打包之前的所有阶段上绑定的插件执行，这是一个顺序的，可以理解为-只要你现在20岁，那么你肯定就要经过1-20岁之间的时间，只要执行的是打包命令，那么打包之前的阶段：编译、测试等都会被顺序执行。下面是执行`mvn package`默认会被一次执行的插件，同时，我们可以自行帮插件到相应的阶段上去

	G:\ziyuan\learn\maven\mvnlearn\webtest>mvn package
	[INFO] Scanning for projects...
	[INFO]
	[INFO] ------------------------------------------------------------------------
	[INFO] Building webtest 1.0-SNAPSHOT
	[INFO] ------------------------------------------------------------------------
	[INFO]
	[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ webtest --
	-
	[INFO] Using 'UTF-8' encoding to copy filtered resources.
	[INFO] skip non existing resourceDirectory G:\ziyuan\learn\maven\mvnlearn\webtes
	t\src\main\resources
	[INFO]
	[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ webtest ---
	[INFO] Compiling 1 source file to G:\ziyuan\learn\maven\mvnlearn\webtest\target\
	classes
	[INFO]
	[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ we
	btest ---
	[INFO] Using 'UTF-8' encoding to copy filtered resources.
	[INFO] skip non existing resourceDirectory G:\ziyuan\learn\maven\mvnlearn\webtes
	t\src\test\resources
	[INFO]
	[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ webte
	st ---
	[INFO] Compiling 1 source file to G:\ziyuan\learn\maven\mvnlearn\webtest\target\
	test-classes
	[INFO]
	[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ webtest ---
	[INFO] Surefire report directory: G:\ziyuan\learn\maven\mvnlearn\webtest\target\
	surefire-reports

	-------------------------------------------------------
	 T E S T S
	-------------------------------------------------------
	Running com.ykjver.AppTest
	Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec

	Results :

	Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

	[INFO]
	[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ webtest ---
	[INFO] Building jar: G:\ziyuan\learn\maven\mvnlearn\webtest\target\webtest-1.0-S
	NAPSHOT.jar
	[INFO] ------------------------------------------------------------------------
	[INFO] BUILD SUCCESS
	[INFO] ------------------------------------------------------------------------
	[INFO] Total time: 4.579 s
	[INFO] Finished at: 2015-12-02T21:21:47+08:00
	[INFO] Final Memory: 18M/170M
	[INFO] ------------------------------------------------------------------------


可以看到他执行的插件顺眼是resource->compile->testResource->testCompile->test->jar
这就是被默认绑定到周期上的插件，在按照生命周期顺序一次执行 


### 构建多模块项目

- 待续



###Reference 

- [maven学习教程：What、How、Why](http://www.flyne.org/article/167)
- [开源中国 Maven 库使用帮助](http://maven.oschina.net/help.html)
- [易百maven教程](http://www.yiibai.com/maven/)